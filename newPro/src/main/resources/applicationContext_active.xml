<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/task
   		http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://code.alibabatech.com/schema/dubbo        
		http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
      
    <!-- 引入jdbc配置文件 -->
    <context:property-placeholder location="classpath:/application.properties"/>
	<!-- dataSource数据连接配置，获取application.properties数据 start -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName">
			<value>${jdbc_driverClassName}</value>
		</property>
		<property name="url">
			<value>${jdbc_url}</value>
		</property>
		<property name="username">
			<value>${jdbc_username}</value>
		</property>
		<property name="password">
			<value>${jdbc_password}</value>
		</property>
		<!-- 连接属性 -->
		<property name="connectionProperties">
			<value>clientEncoding=UTF-8</value>
		</property>
	</bean>
	<!-- dataSource数据连接配置，获取application.properties数据 end -->

	<!-- spring 整合myBatis核心配置 start -->
	<!-- mybatis文件配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
	</bean>
	<!-- spring与mybatis整合配置，扫描所有Mapper文件 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 此处配置的作用：一般情况用不到，但当配置多个sqlSessionFactory时，用于指定使用哪个 -->
 		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="net.shopin.active.mapper" />
	</bean>
	<!-- spring 整合myBatis核心配置 end -->

	<!-- 对数据源进行事务管理 start-->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 声明事务规则 -->
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />	
		</tx:attributes>
	</tx:advice>
	<aop:config>
        <!-- 定义切面 -->
        <aop:pointcut id="oaServiceMethods"
            expression="execution(* net.shopin.active.service.impl.*.*(..))" />
        <!-- 将事务通知和切面组合 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="oaServiceMethods" />
    </aop:config>
	<!-- 对数据源进行事务管理 end-->
	
	
</beans>